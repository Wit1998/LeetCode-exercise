面试题16. 数值的整数次方
实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。
示例 1:
输入: 2.00000, 10
输出: 1024.00000
说明:

-100.0 < x < 100.0
n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。


解题思路
这题难度不大，不过需要计算机基础知识。
代码中的n>>1意思是把原来二进制的偶数最后一位位数去掉，和n / 2的作用一样，相当于模2，不过能加快运算速度
题解中的大佬是真的厉害。

代码

func myPow(x float64, n int) float64 {
    if n == 0 {
        return 1
    }else if n < 0 {
        x = 1.0 / x 
        n = -n
    }
    res := 1.0
    for n > 1 {
        //判断n的二进制最后一位是不是1（用来判断n值的奇偶性）。
        //如6的二进制 110 后面是0， 5的二进制101 后面是1
        if n & 1 == 1 { //为奇
            res *= x
            n--
        }else {    //为偶数
        //如果是偶数，就能够直接的移位，相当于指数模2运算了一次。
        //这里的x是迭代，相当于永久让x = x^2 ,如果再进入该语句， x就变成了 x^4,以此类推
            x *= x
            n = n >> 1
        }
    }
    res *= x
    return res
}

作者：wit1998
链接：https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/solution/shu-zhi-de-zheng-shu-ci-fang-by-wit1998/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
