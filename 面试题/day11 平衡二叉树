面试题55 - II. 平衡二叉树
输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。

 

示例 1:

给定二叉树 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7
返回 true 。

示例 2:

给定二叉树 [1,2,2,3,3,null,null,4,4]

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
返回 false 。

 

限制：

1 <= 树的结点个数 <= 10000


解题思路
也是dfs先遍历，但根节点从原来的根节点，变成了根节点的左右节点。

代码

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isBalanced(root *TreeNode) bool {
    if root == nil {
        return true
    }
    max_left := dfs(root.Left)
    max_right := dfs(root.Right)
    if math.Abs(float64(max_left -max_right)) <= 1 && 
    isBalanced(root.Left) && isBalanced(root.Right) {
        return true
    } else {
        return false
    }
}
func dfs(root *TreeNode) int {
    if root == nil {
        return 0
    }
    ldp := dfs(root.Left)
    rdp := dfs(root.Right)
    if ldp > rdp {
        return ldp + 1
    } else {
        return rdp + 1
    }
    
}

作者：wit1998
链接：https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/solution/ping-heng-er-cha-shu-by-wit1998/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
