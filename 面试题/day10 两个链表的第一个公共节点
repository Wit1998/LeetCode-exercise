面试题52. 两个链表的第一个公共节点
输入两个链表，找出它们的第一个公共节点。
如下面的两个链表：
在节点 c1 开始相交。

示例 1：
输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Reference of the node with value = 8
输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。

示例 2：
输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
输出：Reference of the node with value = 2
输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。
 
示例 3：
输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
输出：null
输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。
解释：这两个链表不相交，因此返回 null。
注意：

如果两个链表没有交点，返回 null.
在返回结果后，两个链表仍须保持原有的结构。
可假定整个链表结构中没有循环。
程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。


解题思路
灵活使用map。要注意，这里的公共节点不仅仅只是值相同，地址也要相同，因此使用map，把该节点的所有属性都传入到[]里面，如果在查找中找到[]完全一样的属性，说明从该节点开始，都是公共节点了。

代码

/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func getIntersectionNode(headA, headB *ListNode) *ListNode {
    //创建一个临时的map，map里面存的是地址，外面存的是值
    var tmpMap = make(map[*ListNode]int)
    //如果AB都空，则跳出循环
	for headA != nil || headB != nil{

		if headA != nil{
            //如果map中没有该节点，则把该节点添加进去
			if _, ok := tmpMap[headA]; !ok{
                //令当前节点的值为headA.Val
				tmpMap[headA] = headA.Val
			}else {
				return headA
			}
            //指向下一个
			headA = headA.Next
		}

		if headB != nil{
            //如果map中没有该节点，则把该节点添加进去
			if _, ok := tmpMap[headB]; !ok{
                //令当前节点的值为headB.Val
				tmpMap[headB] = headB.Val
			}else {
				return headB
			}

			headB = headB.Next
		}
	}

	return nil
}

作者：wit1998
链接：https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/solution/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-di-14/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
