剑指 Offer 66. 构建乘积数组
给定一个数组 A[0,1,…,n-1]，请构建一个数组 B[0,1,…,n-1]，其中 B 中的元素 B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]。不能使用除法。

 

示例:

输入: [1,2,3,4,5]
输出: [120,60,40,30,24]
 

提示：

所有元素乘积之和不会溢出 32 位整数
a.length <= 100000


解题思路
不能使用除法，所以使用两个数组，把i的左边和右边相乘的值保存起来，然后两个数组相乘，得到的值就是目标数组。
T(n) = O(3n)

代码

func constructArr(a []int) []int {
    if len(a) <= 1 {
        return a
    }
    left, right := make([]int, len(a)), make([]int, len(a))
    left[0] = 1
    right[len(a) - 1] = 1
    //左边到i的数的数组
    for i := 1; i < len(a); i++ {
        left[i] = left[i - 1] * a[i - 1]
    }
    //右边到i的数的数组
    for i := len(a) - 2; i >= 0; i-- {
        right[i] = right[i + 1] * a[i + 1]
    }
    //左右相乘，即为目标数组的值
    arr := make([]int, len(a))
    for i := 0; i< len(a); i++ {
        arr[i] = left[i] * right[i]
    }
    return arr
}


作者：wit1998
链接：https://leetcode-cn.com/problems/gou-jian-cheng-ji-shu-zu-lcof/solution/gou-jian-cheng-ji-shu-zu-by-wit1998/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
