面试题30. 包含min函数的栈
定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。
示例:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.min();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.min();   --> 返回 -2.
 

提示：

各函数的调用总次数不超过 20000 次


解题思路
要注意： nums[0 : len(nums) - 1] 中[]是前闭后开，所以不包括len(nums) - 1这个数。

代码

type MinStack struct {
    nums []int
    min int
}


/** initialize your data structure here. */
func Constructor() MinStack {
    return MinStack{[]int{}, 0}
}


func (this *MinStack) Push(x int)  {
    if len(this.nums) == 0{
        this.min = x
    }else{
        if x < this.min{
            this.min = x
        }
    }
    this.nums = append(this.nums, x)
}


func (this *MinStack) Pop()  {
    temp := this.nums[len(this.nums) - 1]
    this.nums = this.nums[0 : len(this.nums) - 1]
    if temp == this.min {
        if len(this.nums) > 0 {
            this.min = this.nums[0]
            for _,v := range this.nums{
                if v < this.min{
                    this.min=v
                }
            }
        }
    }
}


func (this *MinStack) Top() int {
    return this.nums[len(this.nums) - 1]
}


func (this *MinStack) Min() int {
    return this.min
}


/**
 * Your MinStack object will be instantiated and called as such:
 * obj := Constructor();
 * obj.Push(x);
 * obj.Pop();
 * param_3 := obj.Top();
 * param_4 := obj.Min();
 */

作者：wit1998
链接：https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/solution/bao-han-minhan-shu-de-zhan-by-wit1998/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
