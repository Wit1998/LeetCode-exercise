面试题46. 把数字翻译成字符串
给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。
示例 1:
输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"
提示：
0 <= num < 231


解题思路
两种解法：1.递归 2.滚动数组

代码

func translateNum(num int) int {
    if num < 10 {
        return 1
    }
    res := 0
    //从后往前递归
    //如果满足该条件，则证明最后的一个数有两种情况，为1位或两位
    if num % 100 <= 25 && num % 100 >= 10  {
        //这里除100相当于减少num的两位，除10相当于减少一位
        res += translateNum(num / 100) 
        res += translateNum(num / 10) 
    }else {
    //不满足条件，则只满足1位
        res += translateNum(num / 10)
    }
    return res
}

作者：wit1998
链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/solution/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-by-wit1998/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
