面试题09. 用两个栈实现队列
用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )

 

示例 1：

输入：
["CQueue","appendTail","deleteHead","deleteHead"]
[[],[3],[],[]]
输出：[null,null,3,-1]
示例 2：

输入：
["CQueue","deleteHead","appendTail","appendTail","deleteHead","deleteHead"]
[[],[],[5],[2],[],[]]
输出：[null,-1,null,null,5,2]
提示：

1 <= values <= 10000
最多会对 appendTail、deleteHead 进行 10000 次调用


解题思路
要搞清楚栈和队列的进出规则。
栈是先进后出，队列是先进先出
要用两个栈，实现一个队列。只需要用两个栈来分别对值进行进出，一个控制进，一个控制出。
这样一来一回，两个先进后出，就负负得正了。变成了先进先出的感觉。

代码

//栈
type CQueue struct {
    in []int 
    out []int
}


func Constructor() CQueue {
    return CQueue{}
}

//进队列，相当于进 in栈
func (this *CQueue) AppendTail(value int)  {
    this.in = append(this.in, value)
}

//出队列，相当于把 in栈的内容取出，存入到 out栈，然后取出out栈的内容
func (this *CQueue) DeleteHead() int {
    //如果 in栈 和 out栈 的len都为0，返回-1
    if len(this.in) == 0 && len(this.out) == 0 {
        return -1 
    }
    //如果 out栈为空的，说明需要将 in栈的值取出存入到 out栈中
    if len(this.out) == 0 {
        //把 in栈的内容取空
        for len(this.in) > 0 {
            //栈是从后往前取的
            last := len(this.in) - 1
            //把 in栈的最后一个元素存入到out栈中
            this.out = append(this.out, this.in[last])
            //in栈就删除掉last的值
            this.in = this.in[:last]
        }
    }
    //如果 out栈不为空，则直接取出(按照从后到前的顺序)
    last := len(this.out) - 1
    //num为取出的值
    num := this.out[last]
    this.out = this.out[:last]
    return num
}


/**
 * Your CQueue object will be instantiated and called as such:
 * obj := Constructor();
 * obj.AppendTail(value);
 * param_2 := obj.DeleteHead();
 */

作者：wit1998
链接：https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/yong-liang-ge-zhan-shi-xian-dui-lie-by-wit1998/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
