面试题26. 树的子结构
输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)

B是A的子结构， 即 A中有出现和B相同的结构和节点值。

例如:
给定的树 A:

     3
    / \
   4   5
  / \
 1   2
给定的树 B：

   4 
  /
 1
返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。

示例 1：

输入：A = [1,2,3], B = [3,1]
输出：false
示例 2：

输入：A = [3,4,5,1,2], B = [4,1]
输出：true
限制：

0 <= 节点个数 <= 10000

解题思路
参考题解，这里返回的返回值很巧妙。
dfs函数就是正常的深度优先搜索。
isSubStructure中返回A左右树的递归，间接的把A树的所有情况都递归了出来。
然后使用并集相连，只要在所有的递归下，dfs能返回一个true，就代表有子结构

代码

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isSubStructure(A *TreeNode, B *TreeNode) bool {
    if A == nil || B == nil  {
        return false
    }
    //isSubStructure(A.Left, B) || isSubStructure(A.Right, B)这种递归，相当于把所有的树都取到了
    //所以在所有的情况下，只要dfs能返回一个true,就能让所有的false变成true。因为使用的是并集
    return isSubStructure(A.Left, B) || isSubStructure(A.Right, B) || dfs(A, B)
}
func dfs (A *TreeNode, B *TreeNode) bool {
    //B已经找完
    if B == nil {
        return true
    }
    //A如果找完，说明没有叶子节点
    if A == nil {
        return false
    }
    return dfs(A.Left, B.Left) && dfs(A.Right, B.Right) && A.Val == B.Val
     

}

作者：wit1998
链接：https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/solution/shu-de-zi-jie-gou-by-wit1998/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
