70. 爬楼梯
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶


解题思路1
滚动数组实现。如果只用到本层和上层的数据，就可以使用滚动数组，能减少时间复杂度，但空间复杂度会变大。

代码

func climbStairs(n int) int {
    //滚动数组
    p, q, r := 0, 0, 1 
    for i := 0; i < n; i++ {
        p = q 
        q = r 
        r = p + q 

    }
    return r
}


解题思路2
动态规划的方法，也比较简单，和斐波那契数列类似。
只是把斐波那契数的函数变成了一个数组，每次循环，添加一个 arr[i-1]+arr[i-2]大小的数到数组中。

代码

func climbStairs(n int) int{
    //动态规划
    arr := []int{1, 1}
    for i:=2; i<=n; i++{
        arr = append(arr, arr[i-1]+arr[i-2])
    }
    return arr[n]
}

作者：wit1998
链接：https://leetcode-cn.com/problems/climbing-stairs/solution/pa-lou-ti-by-wit1998/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
