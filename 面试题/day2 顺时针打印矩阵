面试题29. 顺时针打印矩阵
输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。
示例 1：
输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]
示例 2：
输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]
限制：
0 <= matrix.length <= 100
0 <= matrix[i].length <= 100
顺时针打印矩阵

解题思路
使用很直观的思路，
1.类似坐标，以44为例，矩阵的四个点分别为（0,0）（0,3）（3,3）（3,0），循环一次后，坐标变为（1,1）（1,2）（2,2）（2,1），可以看出，一次循环后，left top 加1，right buttom减1.
2.这里不考虑坐标的象限，因为从下到上还是从上到下是自己决定的，先从下到上，是逆时针，也就和上面的坐标轨迹相同。先从上到下，就是顺时针的方向打印了。
3.思考如何打印所有的矩阵。
当left或top的值小于right或buttom的值时，说明还没打印完。
当left或top的值大于right或buttom的值时，说明打完，结束循环，返回记录值的切片
当出现等于时（也可能不存在，如44中就不存在），是临界点，说明是最后一次打印了，且这次打印只可能是一个点或一条线，因此后半段的内容可以直接跳过。减少时间复杂度。

代码
func spiralOrder(matrix [][]int) []int {
    
    if len(matrix) == 0 || len(matrix[0]) == 0 {
        return []int{}
    }
    var (
        cow = len(matrix)
        column = len(matrix[0])
        top, left, right, button= 0, 0, column - 1, cow - 1
        order = make([]int, cow * column)
        index = 0
    )
    for top <= button && left <= right{
        for column = left; column <= right; column++ {
            order[index] = matrix[top][column]
            index++
        } 
        for cow = top + 1; cow <= button; cow++ {
            order[index] = matrix[cow][right]
            index++
        } 
        if top < button && left < right {
            for column = right -1; column > left; column-- {
            order[index] = matrix[button][column]
            index++
        } 
            for cow = button ; cow > top; cow-- {
            order[index] = matrix[cow][left]
            index++
        }
        } 
    top ++ 
    left++
    button--
    right--
    }
    return order
    }
