面试题13. 机器人的运动范围
地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？
示例 1：
输入：m = 2, n = 3, k = 1
输出：3
示例 2：
输入：m = 3, n = 1, k = 0
输出：1
提示：
1 <= n,m <= 100
0 <= k <= 20

解题思路
这题也是深度优先的方法。
刚开始想法和矩阵中的路径那题一样，用判断周围是否有相邻的格子来判断是否连续。可是不能使用，因为如果k值很小，m,n很大，就会导致在机器人运动范围外也有一系列的格子满足条件，变成连续。因此不能使用该方法区别连续。
参考题解，发现有个方法很巧妙，就是定义好一个m*n 初值全为0的二维数组，机器人每走一步，就把0变成1，并判断周围是否有1.如果超出范围的值满足k的条件，也会被筛选出来。

代码

func movingCount(m int, n int, k int) int {
    //定义一个m * n 的数组
    array := make([][]int, m)
    for i,_ := range array {
        array[i] = make([]int, n)
    }
    //(0,0)必定存在，a从1开始计数
    array[0][0] = 1 
    a := 1
    for i := 0; i < m; i++ {
        for j := 0; j < n; j++ {
            if (i > 0 && array[i - 1][j] == 1) || (j > 0 && array[i][j - 1] == 1) {
                if getres(i, j, k) {
                    array[i][j] = 1
                    a++
                }
            }
        }
    }
    return a
}
func getres(m, n, k int) bool {
    res := 0
    for m > 0 {
        res += m % 10
        m /= 10 
    }
    for n > 0 {
        res += n % 10
        n /= 10 
    }

作者：wit1998
链接：https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-wit1998/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
