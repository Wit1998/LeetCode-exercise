面试题18. 删除链表的节点
给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。

返回删除后的链表的头节点。

注意：此题对比原题有改动

示例 1:

输入: head = [4,5,1,9], val = 5
输出: [4,1,9]
解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.
示例 2:

输入: head = [4,5,1,9], val = 1
输出: [4,5,9]
解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9.
 

说明：

题目保证链表中节点的值互不相同
若使用 C 或 C++ 语言，你不需要 free 或 delete 被删除的节点


解题思路
如果直接使用双指针的办法，head的头结点就不好进行比较了。创建一个假头链表是一个很高明的办法。
可以简化Next.Next的写法

代码

/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func deleteNode(head *ListNode, val int) *ListNode {
    //重新创立一个假头链表。意思是第一个头结点为0
    dummy := &ListNode {
        Val : 0,
        Next : head,
    }
    //双指针
    first := dummy   //为0
    second := dummy.Next    //为head的第一个数
    for{
        if second.Val == val {  //找到
            first.Next = second.Next
            break
        }
        first = first.Next
        second = second.Next
    }
    //要返回dummy下一个节点的链表，因为头节点定义的0
    return dummy.Next
}

作者：wit1998
链接：https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/solution/shan-chu-lian-biao-de-jie-dian-by-wit1998/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
