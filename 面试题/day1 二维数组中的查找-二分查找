面试题04. 二维数组中的查找
在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
示例:
现有矩阵 matrix 如下：
[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
给定 target = 5，返回 true。
给定 target = 20，返回 false。
限制：
0 <= n <= 1000
0 <= m <= 1000


解题思路
思路不难，因为是有序排列的，直接先锁定行，然后使用二分查找，找到该行中是否有这个数
需要注意的是，如果是空数组[]或者[[]],不管查找什么，直接报错。
代码
func findNumberIn2DArray(matrix [][]int, target int) bool {
    //如果是个空数组
    if len(matrix) == 0 || len(matrix[0]) == 0 {
        return false
        }
    //以行为单位，查看该数是否在该行范围内，在的话，执行二分查找
    var cow,column = len(matrix)  , len(matrix[0]) 
    for i := 0 ; i < cow ; i++ {
        if target >= matrix[i][0] && target <= matrix[i][column - 1] {
            //使用二分查找
            ok := binarySearch(matrix[i], target)
            if ok {
                return true
            }
        }
    }

    return false
}
func  binarySearch(a []int , target int) bool {
    leftIndex, rightIndex := 0, len(a) - 1
    for leftIndex <= rightIndex {
        midIndex := (leftIndex + rightIndex) / 2
        if a[midIndex] == target {
                return true
            }else if a[midIndex] > target {
                rightIndex = midIndex - 1
            }else  {
                leftIndex = midIndex + 1
            }
    }
    return false
}

作者：wit1998
链接：https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/er-wei-shu-zu-zhong-de-cha-zhao-by-wit1998/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
