前序+中序 构造二叉树
func buildTree(preorder []int, inorder []int) *TreeNode {
    for k := range inorder {
        //前序第0个元素 与 中序第k个元素相等时
        if inorder[k] == preorder[0] { 
            return &TreeNode{
                Val: preorder[0],
                //必为左树
                Left:  buildTree(preorder[1:k+1], inorder[0:k]),
                //必为右树
                Right: buildTree(preorder[k+1:], inorder[k+1:]),
            }
        }
    }
    return nil
}
中序+后序 构造二叉树
func buildTree(inorder []int, postorder []int) *TreeNode {
    l := len(postorder)-1
    for k := range inorder {
        //中序第k个元素 与 后序第l个元素相等时
        if inorder[k] == postorder[l] {
            return &TreeNode{
                Val:   inorder[k],
                //必为左树
                Left:  buildTree(inorder[:k], postorder[:k]),
                //必为右树
                Right: buildTree(inorder[k+1:], postorder[k:l]),
            }
        }
    }
    return nil
}
前序+后序 构造二叉树
